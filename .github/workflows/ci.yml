name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Ê∑ªÂä†ÂøÖË¶ÅÁöÑÊùÉÈôê
permissions:
  contents: write      # ÂàõÂª∫ release Âíå tag ÈúÄË¶Å
  actions: read        # ËØªÂèñ actions
  checks: write        # ÂÜôÂÖ•Ê£ÄÊü•Áä∂ÊÄÅ
  pull-requests: write # PR Áõ∏ÂÖ≥ÊùÉÈôê

env:
  GO_VERSION: '1.24.4'
  BINARY_NAME: 'wsc'

jobs:
  # ÊûÑÂª∫ÊâÄÊúâÂπ≥Âè∞
  build:
    name: Build All Platforms
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Generate version
      id: version
      run: |
        VERSION="v$(date '+%Y.%m.%d')-$(git rev-parse --short HEAD)"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"

    - name: Install UPX
      run: |
        sudo apt-get update
        sudo apt-get install -y upx-ucl zip

    - name: Build all platforms
      run: |
        mkdir -p build

        # ÁîüÊàêÊûÑÂª∫‰ø°ÊÅØ
        BUILD_TIME=$(date '+%Y-%m-%d_%H:%M:%S_%Z')
        GIT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        GO_VERSION=$(go version | cut -d' ' -f3)
        VERSION="${{ steps.version.outputs.version }}"
        LDFLAGS="-s -w -X main.AppVersion=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT} -X main.GoVersion=${GO_VERSION}"

        # ÊûÑÂª∫ÊâÄÊúâÂπ≥Âè∞
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
          "windows/arm64"
        )

        for platform in "${platforms[@]}"; do
          IFS='/' read -r os arch <<< "$platform"
          ext=""
          if [ "$os" = "windows" ]; then
            ext=".exe"
          fi

          binary_name="${{ env.BINARY_NAME }}_${os}_${arch}${ext}"
          echo "üî® ÊûÑÂª∫ $binary_name..."

          CGO_ENABLED=0 GOOS=$os GOARCH=$arch go build \
            -ldflags="${LDFLAGS}" \
            -o "build/$binary_name" main.go

          if [ -f "build/$binary_name" ]; then
            echo "‚úÖ ÊûÑÂª∫ÊàêÂäü: $binary_name"
          else
            echo "‚ùå ÊûÑÂª∫Â§±Ë¥•: $binary_name"
            exit 1
          fi
        done

    - name: Compress binaries with UPX
      run: |
        cd build
        echo "üóúÔ∏è ÂºÄÂßã UPX ÂéãÁº©..."

        for binary in ${{ env.BINARY_NAME }}_*; do
          if [ -f "$binary" ]; then
            echo "Â∞ùËØïÂéãÁº© $binary..."
            original_size=$(stat -c%s "$binary" 2>/dev/null || stat -f%z "$binary")

            # Â∞ùËØï UPX ÂéãÁº©ÔºåÂ§±Ë¥•Êó∂ÁªßÁª≠
            if upx --best "$binary" 2>/dev/null; then
              compressed_size=$(stat -c%s "$binary" 2>/dev/null || stat -f%z "$binary")
              ratio=$(echo "scale=1; (1 - $compressed_size/$original_size) * 100" | bc -l 2>/dev/null || echo "unknown")
              echo "‚úÖ ÂéãÁº©ÊàêÂäü $binary (ÂáèÂ∞ë ${ratio}%)"
            else
              echo "‚ö†Ô∏è ÂéãÁº©Â§±Ë¥• $binaryÔºåÁªßÁª≠‰ΩøÁî®ÂéüÂßãÊñá‰ª∂"
            fi
          fi
        done

    - name: Create ZIP packages
      run: |
        cd build
        echo "üì¶ ÂàõÂª∫ ZIP ÂåÖ..."

        for binary in ${{ env.BINARY_NAME }}_*; do
          if [ -f "$binary" ]; then
            zip_name="${binary}.zip"
            echo "ÂàõÂª∫ $zip_name..."
            zip "$zip_name" "$binary"

            if [ -f "$zip_name" ]; then
              echo "‚úÖ ÂàõÂª∫ÊàêÂäü: $zip_name"
            else
              echo "‚ùå ÂàõÂª∫Â§±Ë¥•: $zip_name"
            fi
          fi
        done

    - name: Generate checksums
      run: |
        cd build
        echo "üîê ÁîüÊàêÊ†°È™åÂíå..."
        sha256sum *.zip > SHA256SUMS 2>/dev/null || shasum -a 256 *.zip > SHA256SUMS
        echo "üìã Ê†°È™åÂíåÊñá‰ª∂ÂÜÖÂÆπÔºö"
        cat SHA256SUMS

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: |
          build/*.zip
          build/SHA256SUMS

  # Ëá™Âä®ÂèëÂ∏ÉÔºà‰ªÖÂú® push Âà∞ main ÂàÜÊîØÊó∂Ôºâ
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: build/

    - name: List artifacts
      run: |
        echo "üì¶ ‰∏ãËΩΩÁöÑÊûÑÂª∫‰∫ßÁâ©Ôºö"
        ls -la build/

    - name: Prepare release
      run: |
        VERSION="${{ needs.build.outputs.version }}"
        echo "ÂáÜÂ§áÂèëÂ∏ÉÁâàÊú¨: $VERSION"
        echo "ÊûÑÂª∫‰∫ßÁâ©Ôºö"
        ls -la build/

    - name: Create Release with GitHub CLI
      run: |
        VERSION="${{ needs.build.outputs.version }}"
        BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')

        # ÂàõÂª∫ release notes
        cat > release_notes.md << 'EOF'
        ## WebSocket Client ${{ needs.build.outputs.version }}

        ### üöÄ ‰ºÅ‰∏öÁ∫ßÈ´òÊÄßËÉΩWebSocketÂÆ¢Êà∑Á´Ø

        **Ëá™Âä®ÊûÑÂª∫ÁâàÊú¨** - ÊûÑÂª∫Êó∂Èó¥: BUILD_TIME_PLACEHOLDER

        #### üì¶ ‰∏ãËΩΩ
        ÈÄâÊã©ÈÄÇÂêàÊÇ®Á≥ªÁªüÁöÑ‰∫åËøõÂà∂Êñá‰ª∂Ôºö

        | Âπ≥Âè∞ | Êû∂ÊûÑ | ‰∏ãËΩΩÈìæÊé• |
        |------|------|----------|
        | Linux | AMD64 | [wsc_linux_amd64.zip](./wsc_linux_amd64.zip) |
        | Linux | ARM64 | [wsc_linux_arm64.zip](./wsc_linux_arm64.zip) |
        | macOS | AMD64 | [wsc_darwin_amd64.zip](./wsc_darwin_amd64.zip) |
        | macOS | ARM64 | [wsc_darwin_arm64.zip](./wsc_darwin_arm64.zip) |
        | Windows | AMD64 | [wsc_windows_amd64.exe.zip](./wsc_windows_amd64.exe.zip) |
        | Windows | ARM64 | [wsc_windows_arm64.exe.zip](./wsc_windows_arm64.exe.zip) |

        #### üîê Ê†°È™åÊñá‰ª∂ÂÆåÊï¥ÊÄß
        ```bash
        # ‰∏ãËΩΩÊ†°È™åÂíåÊñá‰ª∂
        curl -LO https://github.com/${{ github.repository }}/releases/download/${{ needs.build.outputs.version }}/SHA256SUMS

        # È™åËØÅÊñá‰ª∂ÂÆåÊï¥ÊÄß
        sha256sum -c SHA256SUMS
        ```

        #### üöÄ Âø´ÈÄüÂºÄÂßã
        ```bash
        # ‰∏ãËΩΩÂπ∂Ëß£Âéã (Linux Á§∫‰æã)
        curl -LO https://github.com/${{ github.repository }}/releases/download/${{ needs.build.outputs.version }}/wsc_linux_amd64.zip
        unzip wsc_linux_amd64.zip
        chmod +x wsc_linux_amd64
        ./wsc_linux_amd64 --version

        # ËøûÊé•WebSocketÊúçÂä°Âô®
        ./wsc_linux_amd64 wss://echo.websocket.org
        ```

        #### üìã ÁâàÊú¨‰ø°ÊÅØ
        - **ÁâàÊú¨**: ${{ needs.build.outputs.version }}
        - **Êèê‰∫§**: ${{ github.sha }}
        - **GoÁâàÊú¨**: ${{ env.GO_VERSION }}
        - **ÊûÑÂª∫‰ºòÂåñ**: ‚úÖ Â∑≤ÂêØÁî®
        - **Â§öÂπ≥Âè∞ÊîØÊåÅ**: ‚úÖ 6‰∏™Âπ≥Âè∞
        EOF

        # ÊõøÊç¢Êó∂Èó¥Âç†‰ΩçÁ¨¶
        sed -i "s/BUILD_TIME_PLACEHOLDER/$BUILD_TIME/g" release_notes.md

        # ‰ΩøÁî® GitHub CLI ÂàõÂª∫ release
        gh release create "$VERSION" \
          --title "WebSocket Client $VERSION" \
          --notes-file release_notes.md \
          --latest \
          build/*.zip \
          build/SHA256SUMS
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ÈÄöÁü•
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build, release]
    if: always()
    steps:
    - name: Notify success
      if: ${{ needs.build.result == 'success' }}
      run: |
        echo "‚úÖ ÊûÑÂª∫ÂÆåÊàêÔºÅ"
        if [ "${{ needs.release.result }}" = "success" ]; then
          echo "üéâ ÂèëÂ∏ÉÊàêÂäüÔºÅ"
        elif [ "${{ needs.release.result }}" = "skipped" ]; then
          echo "‚ÑπÔ∏è ÂèëÂ∏ÉÂ∑≤Ë∑≥ËøáÔºàÈùû main ÂàÜÊîØÔºâ"
        fi

    - name: Notify failure
      if: ${{ needs.build.result == 'failure' || needs.release.result == 'failure' }}
      run: |
        if [ "${{ needs.build.result }}" = "failure" ]; then
          echo "‚ùå ÊûÑÂª∫Â§±Ë¥•ÔºÅËØ∑Ê£ÄÊü•Êó•Âøó„ÄÇ"
        fi
        if [ "${{ needs.release.result }}" = "failure" ]; then
          echo "‚ùå ÂèëÂ∏ÉÂ§±Ë¥•ÔºÅËØ∑Ê£ÄÊü•Êó•Âøó„ÄÇ"
        fi
